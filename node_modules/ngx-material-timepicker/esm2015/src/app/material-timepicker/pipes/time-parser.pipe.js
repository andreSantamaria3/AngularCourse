import * as tslib_1 from "tslib";
import { Inject, Injectable, Pipe } from '@angular/core';
import { TIME_LOCALE } from '../tokens/time-locale.token';
import { TimeUnit } from '../models/time-unit.enum';
import { DateTime } from 'luxon';
import * as ɵngcc0 from '@angular/core';
let TimeParserPipe = class TimeParserPipe {
    constructor(locale) {
        this.locale = locale;
        this.numberingSystem = DateTime.local().setLocale(this.locale).resolvedLocaleOpts().numberingSystem;
    }
    transform(time, timeUnit = TimeUnit.HOUR) {
        if (time == null || time === '') {
            return '';
        }
        if (!isNaN(+time)) {
            return time;
        }
        if (timeUnit === TimeUnit.MINUTE) {
            return this.parseTime(time, 'm', 'minute');
        }
        return this.parseTime(time, 'H', 'hour');
    }
    parseTime(time, format, timeMeasure) {
        const parsedTime = DateTime.fromFormat(String(time), format, { numberingSystem: this.numberingSystem })[timeMeasure];
        if (!isNaN(parsedTime)) {
            return parsedTime;
        }
        throw new Error(`Cannot parse time - ${time}`);
    }
};
TimeParserPipe.ɵfac = function TimeParserPipe_Factory(t) { return new (t || TimeParserPipe)(ɵngcc0.ɵɵdirectiveInject(TIME_LOCALE)); };
TimeParserPipe.ɵpipe = ɵngcc0.ɵɵdefinePipe({ name: "timeParser", type: TimeParserPipe, pure: true });
TimeParserPipe.ɵprov = ɵngcc0.ɵɵdefineInjectable({ token: TimeParserPipe, factory: function (t) { return TimeParserPipe.ɵfac(t); } });
TimeParserPipe.ctorParameters = () => [
    { type: String, decorators: [{ type: Inject, args: [TIME_LOCALE,] }] }
];
TimeParserPipe = tslib_1.__decorate([ tslib_1.__param(0, Inject(TIME_LOCALE))
], TimeParserPipe);
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(TimeParserPipe, [{
        type: Pipe,
        args: [{
                name: 'timeParser'
            }]
    }, {
        type: Injectable
    }], function () { return [{ type: String, decorators: [{
                type: Inject,
                args: [TIME_LOCALE]
            }] }]; }, null); })();
export { TimeParserPipe };

//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidGltZS1wYXJzZXIucGlwZS5qcyIsInNvdXJjZXMiOlsibmd4LW1hdGVyaWFsLXRpbWVwaWNrZXIvc3JjL2FwcC9tYXRlcmlhbC10aW1lcGlja2VyL3BpcGVzL3RpbWUtcGFyc2VyLnBpcGUudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IjtBQUFBLE9BQU8sRUFBRSxNQUFNLEVBQUUsVUFBVSxFQUFFLElBQUksRUFBaUIsTUFBTSxlQUFlLENBQUM7QUFDeEUsT0FBTyxFQUFFLFdBQVcsRUFBRSxNQUFNLDZCQUE2QixDQUFDO0FBQzFELE9BQU8sRUFBRSxRQUFRLEVBQUUsTUFBTSwwQkFBMEIsQ0FBQztBQUNwRCxPQUFPLEVBQUUsUUFBUSxFQUFFLE1BQU0sT0FBTyxDQUFDOztBQVFqQyxJQUFhLGNBQWMsR0FBM0IsTUFBYSxjQUFjO0FBQUcsSUFJMUIsWUFBeUMsTUFBYztBQUMzRCxRQUQ2QyxXQUFNLEdBQU4sTUFBTSxDQUFRO0FBQUMsUUFDcEQsSUFBSSxDQUFDLGVBQWUsR0FBRyxRQUFRLENBQUMsS0FBSyxFQUFFLENBQUMsU0FBUyxDQUFDLElBQUksQ0FBQyxNQUFNLENBQUMsQ0FBQyxrQkFBa0IsRUFBRSxDQUFDLGVBQWUsQ0FBQztBQUM1RyxJQUFJLENBQUM7QUFDTCxJQUNJLFNBQVMsQ0FBQyxJQUFxQixFQUFFLFFBQVEsR0FBRyxRQUFRLENBQUMsSUFBSTtBQUFJLFFBQ3pELElBQUksSUFBSSxJQUFJLElBQUksSUFBSSxJQUFJLEtBQUssRUFBRSxFQUFFO0FBQ3pDLFlBQVksT0FBTyxFQUFFLENBQUM7QUFDdEIsU0FBUztBQUNULFFBQ1EsSUFBSSxDQUFDLEtBQUssQ0FBQyxDQUFDLElBQUksQ0FBQyxFQUFFO0FBQzNCLFlBQVksT0FBTyxJQUFJLENBQUM7QUFDeEIsU0FBUztBQUNULFFBQ1EsSUFBSSxRQUFRLEtBQUssUUFBUSxDQUFDLE1BQU0sRUFBRTtBQUMxQyxZQUFZLE9BQU8sSUFBSSxDQUFDLFNBQVMsQ0FBQyxJQUFJLEVBQUUsR0FBRyxFQUFFLFFBQVEsQ0FBQyxDQUFDO0FBQ3ZELFNBQVM7QUFDVCxRQUNRLE9BQU8sSUFBSSxDQUFDLFNBQVMsQ0FBQyxJQUFJLEVBQUUsR0FBRyxFQUFFLE1BQU0sQ0FBQyxDQUFDO0FBQ2pELElBQ0ksQ0FBQztBQUNMLElBQ1ksU0FBUyxDQUFDLElBQXFCLEVBQUUsTUFBYyxFQUFFLFdBQXdCO0FBQUksUUFDakYsTUFBTSxVQUFVLEdBQUcsUUFBUSxDQUFDLFVBQVUsQ0FBQyxNQUFNLENBQUMsSUFBSSxDQUFDLEVBQUUsTUFBTSxFQUFFLEVBQUMsZUFBZSxFQUFFLElBQUksQ0FBQyxlQUFlLEVBQUMsQ0FBQyxDQUFDLFdBQVcsQ0FBQyxDQUFDO0FBQzNILFFBQ1EsSUFBSSxDQUFDLEtBQUssQ0FBQyxVQUFVLENBQUMsRUFBRTtBQUNoQyxZQUFZLE9BQU8sVUFBVSxDQUFDO0FBQzlCLFNBQVM7QUFDVCxRQUNRLE1BQU0sSUFBSSxLQUFLLENBQUMsdUJBQXVCLElBQUksRUFBRSxDQUFDLENBQUM7QUFDdkQsSUFBSSxDQUFDO0FBQ0wsQ0FDQzs7O3NJQUFBO0FBQ0Q7QUFBd0MseUNBaEN2QixNQUFNLFNBQUMsV0FBVztBQUFRO0FBSjlCLGNBQWMsNEJBSjFCLElBQUksQ0FBQyxVQUNGLElBQUksRUFBRSxZQUFZLHRDQUdsQixDQUlhLG1CQUFBLE1BQU0sQ0FBQyxXQUFXLENBQUMsQ0FBQTtHQU5uQyxDQUFDLE1BQ0QsVkFLb0MsR0FKeEIsY0FBYyxDQW1DMUI7QUFwQ1UsRUFBRTs7Ozs7Ozs7OztrQ0FxQ2I7QUFBQyxTQXBDWSxjQUFjO0FBQUkiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBJbmplY3QsIEluamVjdGFibGUsIFBpcGUsIFBpcGVUcmFuc2Zvcm0gfSBmcm9tICdAYW5ndWxhci9jb3JlJztcbmltcG9ydCB7IFRJTUVfTE9DQUxFIH0gZnJvbSAnLi4vdG9rZW5zL3RpbWUtbG9jYWxlLnRva2VuJztcbmltcG9ydCB7IFRpbWVVbml0IH0gZnJvbSAnLi4vbW9kZWxzL3RpbWUtdW5pdC5lbnVtJztcbmltcG9ydCB7IERhdGVUaW1lIH0gZnJvbSAnbHV4b24nO1xuXG50eXBlIFRpbWVNZWFzdXJlID0gJ2hvdXInIHwgJ21pbnV0ZSc7XG5cbkBQaXBlKHtcbiAgICBuYW1lOiAndGltZVBhcnNlcidcbn0pXG5ASW5qZWN0YWJsZSgpXG5leHBvcnQgY2xhc3MgVGltZVBhcnNlclBpcGUgaW1wbGVtZW50cyBQaXBlVHJhbnNmb3JtIHtcblxuICAgIHByaXZhdGUgcmVhZG9ubHkgbnVtYmVyaW5nU3lzdGVtOiBzdHJpbmc7XG5cbiAgICBjb25zdHJ1Y3RvcihASW5qZWN0KFRJTUVfTE9DQUxFKSBwcml2YXRlIGxvY2FsZTogc3RyaW5nKSB7XG4gICAgICAgIHRoaXMubnVtYmVyaW5nU3lzdGVtID0gRGF0ZVRpbWUubG9jYWwoKS5zZXRMb2NhbGUodGhpcy5sb2NhbGUpLnJlc29sdmVkTG9jYWxlT3B0cygpLm51bWJlcmluZ1N5c3RlbTtcbiAgICB9XG5cbiAgICB0cmFuc2Zvcm0odGltZTogc3RyaW5nIHwgbnVtYmVyLCB0aW1lVW5pdCA9IFRpbWVVbml0LkhPVVIpOiBudW1iZXIgfCBzdHJpbmcge1xuICAgICAgICBpZiAodGltZSA9PSBudWxsIHx8IHRpbWUgPT09ICcnKSB7XG4gICAgICAgICAgICByZXR1cm4gJyc7XG4gICAgICAgIH1cblxuICAgICAgICBpZiAoIWlzTmFOKCt0aW1lKSkge1xuICAgICAgICAgICAgcmV0dXJuIHRpbWU7XG4gICAgICAgIH1cblxuICAgICAgICBpZiAodGltZVVuaXQgPT09IFRpbWVVbml0Lk1JTlVURSkge1xuICAgICAgICAgICAgcmV0dXJuIHRoaXMucGFyc2VUaW1lKHRpbWUsICdtJywgJ21pbnV0ZScpO1xuICAgICAgICB9XG5cbiAgICAgICAgcmV0dXJuIHRoaXMucGFyc2VUaW1lKHRpbWUsICdIJywgJ2hvdXInKTtcblxuICAgIH1cblxuICAgIHByaXZhdGUgcGFyc2VUaW1lKHRpbWU6IHN0cmluZyB8IG51bWJlciwgZm9ybWF0OiBzdHJpbmcsIHRpbWVNZWFzdXJlOiBUaW1lTWVhc3VyZSk6IG51bWJlciB7XG4gICAgICAgIGNvbnN0IHBhcnNlZFRpbWUgPSBEYXRlVGltZS5mcm9tRm9ybWF0KFN0cmluZyh0aW1lKSwgZm9ybWF0LCB7bnVtYmVyaW5nU3lzdGVtOiB0aGlzLm51bWJlcmluZ1N5c3RlbX0pW3RpbWVNZWFzdXJlXTtcblxuICAgICAgICBpZiAoIWlzTmFOKHBhcnNlZFRpbWUpKSB7XG4gICAgICAgICAgICByZXR1cm4gcGFyc2VkVGltZTtcbiAgICAgICAgfVxuXG4gICAgICAgIHRocm93IG5ldyBFcnJvcihgQ2Fubm90IHBhcnNlIHRpbWUgLSAke3RpbWV9YCk7XG4gICAgfVxuXG59XG4iXX0=