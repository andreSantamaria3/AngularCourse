import * as tslib_1 from "tslib";
import { AfterViewInit, Directive, ElementRef, HostListener, Input, Renderer2 } from '@angular/core';
import * as ɵngcc0 from '@angular/core';
var AppendToInputDirective = /** @class */ (function () {
    function AppendToInputDirective(elementRef, renderer) {
        this.renderer = renderer;
        this.element = elementRef.nativeElement;
    }
    Object.defineProperty(AppendToInputDirective.prototype, "inputCords", {
        get: function () {
            return this.inputElement.getBoundingClientRect();
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(AppendToInputDirective.prototype, "direction", {
        get: function () {
            var height = this.element.offsetHeight;
            var _a = this._inputCords, bottom = _a.bottom, top = _a.top;
            var isElementFit = (window && window.innerHeight) - bottom < height;
            var isTop = isElementFit && top > height;
            var isCenter = isElementFit && top < height;
            if (isTop) {
                return 'top';
            }
            else if (isCenter) {
                return 'center';
            }
            return 'bottom';
        },
        enumerable: true,
        configurable: true
    });
    AppendToInputDirective.prototype.ngAfterViewInit = function () {
        this._inputCords = this.inputCords;
        this._direction = this.direction;
        this.append();
    };
    AppendToInputDirective.prototype.changePosition = function () {
        var _a = this.inputCords, bottom = _a.bottom, top = _a.top;
        var y = this.defineElementYByDirection(top, bottom);
        this.setStyle('top', y + "px");
    };
    AppendToInputDirective.prototype.append = function () {
        var _a = this._inputCords, left = _a.left, bottom = _a.bottom, top = _a.top;
        var y = this.defineElementYByDirection(top, bottom);
        this.setStyle('position', 'fixed');
        this.setStyle('left', left + "px");
        this.setStyle('top', y + "px");
    };
    AppendToInputDirective.prototype.setStyle = function (style, value) {
        this.renderer.setStyle(this.element, style, value);
    };
    AppendToInputDirective.prototype.defineElementYByDirection = function (inputTop, inputBottom) {
        if (this._direction === 'top') {
            return inputTop - this.element.offsetHeight;
        }
        else if (this._direction === 'center') {
            return inputTop - (this.element.offsetHeight / 2);
        }
        return inputBottom;
    };
    AppendToInputDirective.ctorParameters = function () { return [
        { type: ElementRef },
        { type: Renderer2 }
    ]; };
    tslib_1.__decorate([
        Input('ngxAppendToInput')
    ], AppendToInputDirective.prototype, "inputElement", void 0);
    tslib_1.__decorate([
        HostListener('window:scroll')
    ], AppendToInputDirective.prototype, "changePosition", null);
AppendToInputDirective.ɵfac = function AppendToInputDirective_Factory(t) { return new (t || AppendToInputDirective)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ElementRef), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.Renderer2)); };
AppendToInputDirective.ɵdir = ɵngcc0.ɵɵdefineDirective({ type: AppendToInputDirective, selectors: [["", "ngxAppendToInput", ""]], hostBindings: function AppendToInputDirective_HostBindings(rf, ctx) { if (rf & 1) {
        ɵngcc0.ɵɵlistener("scroll", function AppendToInputDirective_scroll_HostBindingHandler() { return ctx.changePosition(); }, false, ɵngcc0.ɵɵresolveWindow);
    } }, inputs: { inputElement: ["ngxAppendToInput", "inputElement"] } });
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(AppendToInputDirective, [{
        type: Directive,
        args: [{
                selector: '[ngxAppendToInput]'
            }]
    }], function () { return [{ type: ɵngcc0.ElementRef }, { type: ɵngcc0.Renderer2 }]; }, { changePosition: [{
            type: HostListener,
            args: ['window:scroll']
        }], inputElement: [{
            type: Input,
            args: ['ngxAppendToInput']
        }] }); })();
    return AppendToInputDirective;
}());
export { AppendToInputDirective };

//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiYXBwZW5kLXRvLWlucHV0LmRpcmVjdGl2ZS5qcyIsInNvdXJjZXMiOlsibmd4LW1hdGVyaWFsLXRpbWVwaWNrZXIvc3JjL2FwcC9tYXRlcmlhbC10aW1lcGlja2VyL2RpcmVjdGl2ZXMvYXBwZW5kLXRvLWlucHV0LmRpcmVjdGl2ZS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiO0FBQUEsT0FBTyxFQUFFLGFBQWEsRUFBRSxTQUFTLEVBQUUsVUFBVSxFQUFFLFlBQVksRUFBRSxLQUFLLEVBQUUsU0FBUyxFQUFFLE1BQU0sZUFBZSxDQUFDOztBQU9yRztBQUEwRCxJQVF0RCxnQ0FBWSxVQUFtQyxFQUMzQixRQUFtQjtBQUMzQyxRQUR3QixhQUFRLEdBQVIsUUFBUSxDQUFXO0FBQUMsUUFDcEMsSUFBSSxDQUFDLE9BQU8sR0FBRyxVQUFVLENBQUMsYUFBYSxDQUFDO0FBQ2hELElBQUksQ0FBQztBQUNMLElBQ0ksc0JBQVksOENBQVU7QUFBSSxhQUExQjtBQUFjLFlBQ1YsT0FBTyxJQUFJLENBQUMsWUFBWSxDQUFDLHFCQUFxQixFQUFFLENBQUM7QUFDekQsUUFBSSxDQUFDO0FBRUw7QUFBMEI7QUFDeEIsT0FIRztBQUNMLElBQ0ksc0JBQVksNkNBQVM7QUFBSSxhQUF6QjtBQUFjLFlBQ1YsSUFBTSxNQUFNLEdBQUcsSUFBSSxDQUFDLE9BQU8sQ0FBQyxZQUFZLENBQUM7QUFDakQsWUFBYyxJQUFBLHFCQUFnQyxFQUEvQixrQkFBTSxFQUFFLFlBQXVCLENBQUM7QUFDL0MsWUFBUSxJQUFNLFlBQVksR0FBRyxDQUFDLE1BQU0sSUFBSSxNQUFNLENBQUMsV0FBVyxDQUFDLEdBQUcsTUFBTSxHQUFHLE1BQU0sQ0FBQztBQUM5RSxZQUFRLElBQU0sS0FBSyxHQUFHLFlBQVksSUFBSSxHQUFHLEdBQUcsTUFBTSxDQUFDO0FBQ25ELFlBQVEsSUFBTSxRQUFRLEdBQUcsWUFBWSxJQUFJLEdBQUcsR0FBRyxNQUFNLENBQUM7QUFDdEQsWUFDUSxJQUFJLEtBQUssRUFBRTtBQUNuQixnQkFBWSxPQUFPLEtBQUssQ0FBQztBQUN6QixhQUFTO0FBQUMsaUJBQUssSUFBSSxRQUFRLEVBQUU7QUFDN0IsZ0JBQVksT0FBTyxRQUFRLENBQUM7QUFDNUIsYUFBUztBQUNULFlBQVEsT0FBTyxRQUFRLENBQUM7QUFDeEIsUUFBSSxDQUFDO0FBRUw7QUFBMEI7QUFDSCxPQUhsQjtBQUNMLElBQ0ksZ0RBQWUsR0FBZjtBQUFjLFFBQ1YsSUFBSSxDQUFDLFdBQVcsR0FBRyxJQUFJLENBQUMsVUFBVSxDQUFDO0FBQzNDLFFBQVEsSUFBSSxDQUFDLFVBQVUsR0FBRyxJQUFJLENBQUMsU0FBUyxDQUFDO0FBQ3pDLFFBQ1EsSUFBSSxDQUFDLE1BQU0sRUFBRSxDQUFDO0FBQ3RCLElBQUksQ0FBQztBQUVMLElBQ0ksK0NBQWMsR0FBZDtBQUFjLFFBQ0osSUFBQSxvQkFBK0IsRUFBOUIsa0JBQU0sRUFBRSxZQUFzQixDQUFDO0FBQzlDLFFBQVEsSUFBTSxDQUFDLEdBQUcsSUFBSSxDQUFDLHlCQUF5QixDQUFDLEdBQUcsRUFBRSxNQUFNLENBQUMsQ0FBQztBQUM5RCxRQUFRLElBQUksQ0FBQyxRQUFRLENBQUMsS0FBSyxFQUFLLENBQUMsT0FBSSxDQUFDLENBQUM7QUFDdkMsSUFBSSxDQUFDO0FBRUwsSUFBWSx1Q0FBTSxHQUFkO0FBQWMsUUFDSixJQUFBLHFCQUFzQyxFQUFyQyxjQUFJLEVBQUUsa0JBQU0sRUFBRSxZQUF1QixDQUFDO0FBQ3JELFFBQVEsSUFBTSxDQUFDLEdBQUcsSUFBSSxDQUFDLHlCQUF5QixDQUFDLEdBQUcsRUFBRSxNQUFNLENBQUMsQ0FBQztBQUM5RCxRQUNRLElBQUksQ0FBQyxRQUFRLENBQUMsVUFBVSxFQUFFLE9BQU8sQ0FBQyxDQUFDO0FBQzNDLFFBQVEsSUFBSSxDQUFDLFFBQVEsQ0FBQyxNQUFNLEVBQUssSUFBSSxPQUFJLENBQUMsQ0FBQztBQUMzQyxRQUFRLElBQUksQ0FBQyxRQUFRLENBQUMsS0FBSyxFQUFLLENBQUMsT0FBSSxDQUFDLENBQUM7QUFDdkMsSUFBSSxDQUFDO0FBRUwsSUFBWSx5Q0FBUSxHQUFoQixVQUFpQixLQUFhLEVBQUUsS0FBYTtBQUFJLFFBQzdDLElBQUksQ0FBQyxRQUFRLENBQUMsUUFBUSxDQUFDLElBQUksQ0FBQyxPQUFPLEVBQUUsS0FBSyxFQUFFLEtBQUssQ0FBQyxDQUFDO0FBQzNELElBQUksQ0FBQztBQUVMLElBQVksMERBQXlCLEdBQWpDLFVBQWtDLFFBQWdCLEVBQUUsV0FBbUI7QUFBSSxRQUN2RSxJQUFJLElBQUksQ0FBQyxVQUFVLEtBQUssS0FBSyxFQUFFO0FBQ3ZDLFlBQVksT0FBTyxRQUFRLEdBQUcsSUFBSSxDQUFDLE9BQU8sQ0FBQyxZQUFZLENBQUM7QUFDeEQsU0FBUztBQUFDLGFBQUssSUFBSSxJQUFJLENBQUMsVUFBVSxLQUFLLFFBQVEsRUFBRTtBQUNqRCxZQUFZLE9BQU8sUUFBUSxHQUFHLENBQUMsSUFBSSxDQUFDLE9BQU8sQ0FBQyxZQUFZLEdBQUcsQ0FBQyxDQUFDLENBQUM7QUFDOUQsU0FBUztBQUNULFFBQVEsT0FBTyxXQUFXLENBQUM7QUFDM0IsSUFBSSxDQUFDO0FBQ0o7QUFDaUUsZ0JBNUR0QyxVQUFVO0FBQUksZ0JBQ1IsU0FBUztBQUFHO0FBQ3JDLElBUnNCO0FBRTlCLFFBRkksS0FBSyxDQUFDLGtCQUFrQixDQUFDO0FBQUMsZ0VBQWtCO0FBRWpELElBb0NJO0FBQXFCLFFBRHBCLFlBQVksQ0FBQyxlQUFlLENBQUM7QUFDbEMsZ0VBSUs7SUE1Q1Esc0JBQXNCLGdDQUhsQyxTQUFTLENBQUMsY0FDUCxRQUFRLEVBQUUsb0JBQW9CLFVBQ2pDLENBQUMsUUFDVyxzQkFBc0IsQ0FtRWxDOzs7Ozs7Ozs7Ozs7Ozs7b0JBQ0Q7QUFBQyxJQURELDZCQUFDO0FBQ0EsQ0FEQSxBQW5FRCxJQW1FQztBQUNELFNBcEVhLHNCQUFzQjtBQUFJIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgQWZ0ZXJWaWV3SW5pdCwgRGlyZWN0aXZlLCBFbGVtZW50UmVmLCBIb3N0TGlzdGVuZXIsIElucHV0LCBSZW5kZXJlcjIgfSBmcm9tICdAYW5ndWxhci9jb3JlJztcblxudHlwZSBUaW1lcGlja2VyRGlyZWN0aW9uID0gJ3RvcCcgfCAnY2VudGVyJyB8ICdib3R0b20nO1xuXG5ARGlyZWN0aXZlKHtcbiAgICBzZWxlY3RvcjogJ1tuZ3hBcHBlbmRUb0lucHV0XSdcbn0pXG5leHBvcnQgY2xhc3MgQXBwZW5kVG9JbnB1dERpcmVjdGl2ZSBpbXBsZW1lbnRzIEFmdGVyVmlld0luaXQge1xuXG4gICAgQElucHV0KCduZ3hBcHBlbmRUb0lucHV0JykgaW5wdXRFbGVtZW50OiBhbnk7XG5cbiAgICBwcml2YXRlIF9kaXJlY3Rpb246IFRpbWVwaWNrZXJEaXJlY3Rpb247XG4gICAgcHJpdmF0ZSBfaW5wdXRDb3JkczogQ2xpZW50UmVjdDtcbiAgICBwcml2YXRlIHJlYWRvbmx5IGVsZW1lbnQ6IEhUTUxFbGVtZW50O1xuXG4gICAgY29uc3RydWN0b3IoZWxlbWVudFJlZjogRWxlbWVudFJlZjxIVE1MRWxlbWVudD4sXG4gICAgICAgICAgICAgICAgcHJpdmF0ZSByZW5kZXJlcjogUmVuZGVyZXIyKSB7XG4gICAgICAgIHRoaXMuZWxlbWVudCA9IGVsZW1lbnRSZWYubmF0aXZlRWxlbWVudDtcbiAgICB9XG5cbiAgICBwcml2YXRlIGdldCBpbnB1dENvcmRzKCk6IENsaWVudFJlY3Qge1xuICAgICAgICByZXR1cm4gdGhpcy5pbnB1dEVsZW1lbnQuZ2V0Qm91bmRpbmdDbGllbnRSZWN0KCk7XG4gICAgfVxuXG4gICAgcHJpdmF0ZSBnZXQgZGlyZWN0aW9uKCk6IFRpbWVwaWNrZXJEaXJlY3Rpb24ge1xuICAgICAgICBjb25zdCBoZWlnaHQgPSB0aGlzLmVsZW1lbnQub2Zmc2V0SGVpZ2h0O1xuICAgICAgICBjb25zdCB7Ym90dG9tLCB0b3B9ID0gdGhpcy5faW5wdXRDb3JkcztcbiAgICAgICAgY29uc3QgaXNFbGVtZW50Rml0ID0gKHdpbmRvdyAmJiB3aW5kb3cuaW5uZXJIZWlnaHQpIC0gYm90dG9tIDwgaGVpZ2h0O1xuICAgICAgICBjb25zdCBpc1RvcCA9IGlzRWxlbWVudEZpdCAmJiB0b3AgPiBoZWlnaHQ7XG4gICAgICAgIGNvbnN0IGlzQ2VudGVyID0gaXNFbGVtZW50Rml0ICYmIHRvcCA8IGhlaWdodDtcblxuICAgICAgICBpZiAoaXNUb3ApIHtcbiAgICAgICAgICAgIHJldHVybiAndG9wJztcbiAgICAgICAgfSBlbHNlIGlmIChpc0NlbnRlcikge1xuICAgICAgICAgICAgcmV0dXJuICdjZW50ZXInO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiAnYm90dG9tJztcbiAgICB9XG5cbiAgICBuZ0FmdGVyVmlld0luaXQoKTogdm9pZCB7XG4gICAgICAgIHRoaXMuX2lucHV0Q29yZHMgPSB0aGlzLmlucHV0Q29yZHM7XG4gICAgICAgIHRoaXMuX2RpcmVjdGlvbiA9IHRoaXMuZGlyZWN0aW9uO1xuXG4gICAgICAgIHRoaXMuYXBwZW5kKCk7XG4gICAgfVxuXG4gICAgQEhvc3RMaXN0ZW5lcignd2luZG93OnNjcm9sbCcpXG4gICAgY2hhbmdlUG9zaXRpb24oKTogdm9pZCB7XG4gICAgICAgIGNvbnN0IHtib3R0b20sIHRvcH0gPSB0aGlzLmlucHV0Q29yZHM7XG4gICAgICAgIGNvbnN0IHkgPSB0aGlzLmRlZmluZUVsZW1lbnRZQnlEaXJlY3Rpb24odG9wLCBib3R0b20pO1xuICAgICAgICB0aGlzLnNldFN0eWxlKCd0b3AnLCBgJHt5fXB4YCk7XG4gICAgfVxuXG4gICAgcHJpdmF0ZSBhcHBlbmQoKTogdm9pZCB7XG4gICAgICAgIGNvbnN0IHtsZWZ0LCBib3R0b20sIHRvcH0gPSB0aGlzLl9pbnB1dENvcmRzO1xuICAgICAgICBjb25zdCB5ID0gdGhpcy5kZWZpbmVFbGVtZW50WUJ5RGlyZWN0aW9uKHRvcCwgYm90dG9tKTtcblxuICAgICAgICB0aGlzLnNldFN0eWxlKCdwb3NpdGlvbicsICdmaXhlZCcpO1xuICAgICAgICB0aGlzLnNldFN0eWxlKCdsZWZ0JywgYCR7bGVmdH1weGApO1xuICAgICAgICB0aGlzLnNldFN0eWxlKCd0b3AnLCBgJHt5fXB4YCk7XG4gICAgfVxuXG4gICAgcHJpdmF0ZSBzZXRTdHlsZShzdHlsZTogc3RyaW5nLCB2YWx1ZTogc3RyaW5nKTogdm9pZCB7XG4gICAgICAgIHRoaXMucmVuZGVyZXIuc2V0U3R5bGUodGhpcy5lbGVtZW50LCBzdHlsZSwgdmFsdWUpO1xuICAgIH1cblxuICAgIHByaXZhdGUgZGVmaW5lRWxlbWVudFlCeURpcmVjdGlvbihpbnB1dFRvcDogbnVtYmVyLCBpbnB1dEJvdHRvbTogbnVtYmVyKTogbnVtYmVyIHtcbiAgICAgICAgaWYgKHRoaXMuX2RpcmVjdGlvbiA9PT0gJ3RvcCcpIHtcbiAgICAgICAgICAgIHJldHVybiBpbnB1dFRvcCAtIHRoaXMuZWxlbWVudC5vZmZzZXRIZWlnaHQ7XG4gICAgICAgIH0gZWxzZSBpZiAodGhpcy5fZGlyZWN0aW9uID09PSAnY2VudGVyJykge1xuICAgICAgICAgICAgcmV0dXJuIGlucHV0VG9wIC0gKHRoaXMuZWxlbWVudC5vZmZzZXRIZWlnaHQgLyAyKTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gaW5wdXRCb3R0b207XG4gICAgfVxufVxuIl19