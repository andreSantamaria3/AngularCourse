{"version":3,"file":"ngx-ip.js","sources":["../../../src/ngx-ip/src/ngx-ip.ng-flat.ts","../../../src/ngx-ip/src/index.ts","../../../src/ngx-ip/src/ngx-ip.module.ts","../../../src/ngx-ip/src/ngx-ip.component.ts","../../../src/ngx-ip/src/ngx-ip.base.ts","../../../src/ngx-ip/src/utils.ts"],"sourcesContent":["/**\n * Generated bundle index. Do not edit.\n */\n\nexport * from './index';\n\nexport {ADDRESS_CONTROL_VALIDATORS as ɵb,ADDRESS_CONTROL_VALUE_ACCESSOR as ɵa} from './ngx-ip.component';","export { NgxIpModule } from './ngx-ip.module';\nexport { NgxIpComponent } from './ngx-ip.component';\nexport {\n  VALIDATION_TYPE,\n  ADDRESS_MODE_TYPE,\n  COPY_MODE_TYPE,\n  COPY_METHOD,\n  NgxIpBase\n} from './ngx-ip.base';\n","import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\n\nimport { NgxIpComponent } from './ngx-ip.component';\n\n@NgModule({\n  declarations: [ NgxIpComponent ],\n  imports: [ CommonModule ],\n  exports: [ NgxIpComponent ]\n})\nexport class NgxIpModule { }\n","import {\n  Component,\n  Input,\n  ViewEncapsulation,\n  forwardRef,\n  ChangeDetectionStrategy,\n  ChangeDetectorRef\n} from '@angular/core';\nimport { trigger, transition, style, animate, state } from '@angular/animations';\nimport { NG_VALUE_ACCESSOR, NG_VALIDATORS } from '@angular/forms';\nimport { NgxIpBase, COPY_METHOD } from './ngx-ip.base';\n\nexport const ADDRESS_CONTROL_VALUE_ACCESSOR: any = {\n  provide: NG_VALUE_ACCESSOR,\n  useExisting: forwardRef(() => NgxIpComponent),\n  multi: true\n};\n\nexport const ADDRESS_CONTROL_VALIDATORS: any = {\n  provide: NG_VALIDATORS,\n  useExisting: forwardRef(() => NgxIpComponent),\n  multi: true\n};\n\n@Component({\n  selector: 'ngx-ip',\n  templateUrl: './ngx-ip.component.html',\n  styleUrls: ['./ngx-ip.component.css'],\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  providers: [ ADDRESS_CONTROL_VALUE_ACCESSOR, ADDRESS_CONTROL_VALIDATORS ],\n  animations: [\n    trigger('copyAnim', [\n      transition('void => *', [\n        style({\n          transform: 'translateY(-100%)'\n        }),\n        animate('0.25s')\n      ]),\n      transition('* => void', [\n        animate('0.25s', style({\n          transform: 'translateY(-100%)'\n        }))\n      ])\n    ]),\n    trigger('inputAnim', [\n      state('hide', style({opacity: 0})),\n      transition('* => hide', [\n        animate('0.25s', style({\n          transform: 'translateY(100%)'\n        }))\n      ]),\n      transition('hide => *', [\n        style({\n          transform: 'translateY(100%)'\n        }),\n        animate('0.25s')\n      ])\n    ])\n  ]\n})\nexport class NgxIpComponent extends NgxIpBase {\n  public containerClass: string[] = [];\n  public resolveCopyMethod: (method: COPY_METHOD) => void;\n  public inputAnim: string;\n  private _highlightInvalidBlocks: boolean = true;\n\n  get highlightInvalidBlocks(): boolean {\n    return this._highlightInvalidBlocks;\n  }\n\n  /**\n   * When true add's the 'ngx-ip-error' class to the block when it's invalid.\n   * @param value\n   */\n  @Input()\n  set highlightInvalidBlocks(value: boolean) {\n    if (this._highlightInvalidBlocks === value) {\n      return;\n    }\n\n    this._highlightInvalidBlocks = value;\n    this.markValidity();\n  }\n\n  get focused(): boolean {\n    return this.containerClass.indexOf('ngx-ip-focused') > -1;\n  }\n\n  set focused(value: boolean) {\n    const idx = this.containerClass.indexOf('ngx-ip-focused');\n    if (value && idx === -1) {\n      this.containerClass.push('ngx-ip-focused');\n    } else if (!value && idx > -1) {\n      this.containerClass.splice(idx, 1);\n    }\n  }\n\n  get theme(): string {\n    return this._theme;\n  }\n\n  /**\n   * The CSS class representing the theme of this instance.\n   * @param value\n   */\n  @Input()\n  set theme(value: string) {\n    if (this._theme === value) {\n      return;\n    }\n\n    let idx = this.containerClass.indexOf(this._theme);\n    if (idx > -1) {\n      this.containerClass.splice(idx, 1);\n    }\n\n    this._theme = value;\n\n    if (value) {\n      this.containerClass.push(value);\n    }\n  }\n\n  private _theme: string = '';\n\n  constructor(cdr: ChangeDetectorRef) {\n    super(cdr);\n  }\n\n  onCopyDecision(method: COPY_METHOD): void {\n    const fn = this.resolveCopyMethod;\n    this.resolveCopyMethod = this.inputAnim = undefined;\n    if (fn) {\n      fn(method);\n    }\n  }\n\n  getUserCopyMethod(): Promise<COPY_METHOD> {\n    this.inputAnim = 'hide';\n    return new Promise( resolve => this.resolveCopyMethod = resolve );\n  }\n}\n","import {\n  Input,\n  Output,\n  EventEmitter,\n  ViewChildren,\n  QueryList,\n  ElementRef,\n  ChangeDetectorRef,\n  OnChanges,\n  SimpleChanges\n} from '@angular/core';\nimport {\n  AbstractControl,\n  ValidationErrors,\n  ControlValueAccessor,\n  Validator\n} from '@angular/forms';\nimport {\n  AddressModeLogic,\n  noop,\n  v4,\n  v4WithMask,\n  v6,\n  mac,\n  inputSelection,\n  coerceBooleanProperty\n} from './utils';\n\nexport type ADDRESS_MODE_TYPE = 'ipv4' | 'ipv4WithMask' | 'ipv6' | 'mac';\nexport type COPY_METHOD = 'block' | 'address';\nexport type COPY_MODE_TYPE = 'block' | 'address' | 'select';\nexport type VALIDATION_TYPE = 'none' | 'char' | 'block';\n\n// if supported set it, else try once\nlet COPY_FEAT_SUPPORTED: null | boolean | 'TEST' = document.queryCommandSupported('copy') ? true : null;\n\nfunction cancelEvent($event: Event): void {\n  $event.preventDefault();\n  $event.stopPropagation();\n}\n\nconst MODE_MAP = {\n  'ipv6': v6,\n  'mac': mac,\n  'ipv4WithMask': v4WithMask,\n  'ipv4': v4\n};\n\nexport class NgxIpBase implements OnChanges, ControlValueAccessor, Validator {\n  public blocks: string[];\n  public blocksRef: number[];\n  public invalidBlocks: boolean[];\n  public addr: AddressModeLogic;\n  public focused;\n\n  get mode(): ADDRESS_MODE_TYPE {\n    return this._mode;\n  }\n\n  /**\n   * IP format.\n   * Valid values: 'ipv4', 'ipv6' or 'mac'\n   * @param mode\n   */\n  @Input()\n  set mode(mode: ADDRESS_MODE_TYPE) {\n    if (this._mode === mode) {\n      return;\n    }\n\n    /* We set the separator of the new address logic only if user did not set it explicitly.\n       but we also need to support changing of modes so we check old address logic separator to\\\n       match current, if match then we know user did not set separator to something else and so\n       we update new logic separator */\n    const setSeparator = !this.addr || this.separator === this.addr.SEP;\n    this.addr = MODE_MAP[mode];\n    if (!this.addr) {\n      throw new Error(`Unknown mode ${mode}`);\n    }\n\n    if (setSeparator) {\n      this.separator = this.addr.SEP;\n    }\n\n    this._mode = mode;\n    this.blocks = this.addr.blocks();\n    this.blocksRef = [];\n    this.invalidBlocks = [];\n    this.fullBlocks = 0;\n    for (let i = 0; i < this.addr.BLOCK_COUNT; i++) {\n      this.fullBlocks |= 1 << (i + 1);\n      this.blocksRef[i] = i;\n      this.invalidBlocks[i] = false;\n    }\n  }\n\n  @Input()\n  get value(): string { return this._value; };\n  set value(v: string) {\n    if (v !== this._value) {\n      this._value = v;\n      this.blocks = this.toBlocks(v);\n      this.markValidity();\n      this._onChangeCallback(v);\n      this._cdr.markForCheck();\n      this._cdr.detectChanges();\n    }\n  }\n\n  get copyMode(): COPY_MODE_TYPE {\n    switch (this.autoCopy) {\n      case 'DEFAULT_ADDRESS':\n        return 'address';\n      case 'DEFAULT_BLOCK':\n        return 'block';\n      default:\n        return 'select';\n    }\n  }\n\n  @Input()\n  set copyMode(value: COPY_MODE_TYPE) {\n\n    // if copy is not supported in this browser don't allow select mode.\n    if (COPY_FEAT_SUPPORTED === false && value === 'select') {\n      value = undefined;\n    }\n\n    switch (value) {\n      case 'select':\n        this.autoCopy = undefined;\n        break;\n      case 'address':\n        this.autoCopy = 'DEFAULT_ADDRESS';\n        break;\n      default:\n        this.autoCopy = 'DEFAULT_BLOCK';\n        break;\n    }\n  }\n\n  /**\n   * The separator to use character to use as an octet delimiter.\n   * The value has an effect on both UI and UX.\n   * On the UI side, this character is what the user see's as the delimiter.\n   * On the UX side, when this character value is pressed the focus jumps to the next octet\n   * similar to what happens when the user press TAB\n   *\n   * Another behaviour that changes is the paste operation, paste will split to octets by the specified\n   * separator, e.g.: The IP address 10.0.0.1 when pasted and the separator is \",\" will not split correctly.\n   */\n  @Input() get separator(): string { return this._separator; }\n  set separator(value: string) {\n    this._separator = value;\n    this.separatorMap = this.addr.blocks().map( b => value);\n    this.separatorMap[this.addr.BLOCK_COUNT - 1] = '';\n    if (this.addr === v4WithMask) {\n      this.separatorMap[this.addr.BLOCK_COUNT - 2] = '/';\n    }\n  }\n\n  /**\n   * The validation level performed on an input.\n   * This is a validation performed based on a keystroke. Does not apply to paste.\n   * none - No validation\n   * char - Only valid char's are allowed (however, invalid value can be set. e.g: 333)\n   * block - Only valid char's that compose a valid block are allowed\n   *\n   * Default: 'block'\n   */\n  @Input() inputValidation: VALIDATION_TYPE = 'block';\n\n  /**\n   * A bit map representing disabled blocks.\n   * e.g: [1, 1, 0, 0] will set disabled the first 2 blocks (from the left).\n   * Since the component is set to OnPush this is an immutable array, to change the state\n   * replace the array (don't change it's items).\n   */\n  @Input() disabledBlocks: boolean[] = [];\n\n  @Input() get disabled() { return this._disabled; }\n  set disabled(value: any) { this._disabled = coerceBooleanProperty(value); }\n\n  @Input()\n  get readonly() { return this._readonly; }\n  set readonly(value: any) { this._readonly = coerceBooleanProperty(value); }\n\n  @Input()\n  get required() { return this._required; }\n  set required(value: any) { this._required = coerceBooleanProperty(value); }\n\n  @Output() change = new EventEmitter<string>();\n\n  @ViewChildren('input', { read: ElementRef }) public inputs: QueryList<ElementRef>;\n\n  separatorMap: string[];\n\n  protected errorCount: number = 0;\n  protected emptyFlag: number = 0;\n  protected fullBlocks: number = 0;\n\n  private _required: boolean = false;\n  private _readonly: boolean = false;\n  private _disabled: boolean = false;\n  private _mode: ADDRESS_MODE_TYPE;\n  private _value: string = null;\n  private _onTouchedCallback: () => void = noop;\n  private _onChangeCallback: (_: any) => void = noop;\n  private autoCopy: 'DEFAULT_BLOCK' | 'DEFAULT_ADDRESS' | COPY_METHOD | 'IN_FLIGHT';\n  private _separator: string;\n\n  constructor(private _cdr: ChangeDetectorRef) {\n    this.mode = 'ipv4';\n  }\n\n  ngOnChanges(changes: SimpleChanges) {\n    if ('separator' in changes) {\n      if (!changes.separator.currentValue) {\n        this.separator = this.addr.SEP;\n      } else if (this.separator.length > 1) {\n        this.separator = this.separator[0];\n      }\n    }\n  }\n\n  isBlockDisabled(idx: number): boolean {\n    return this.disabled || this.disabledBlocks[idx];\n  }\n\n  validate(c: AbstractControl): ValidationErrors | null {\n    if (this.required && this.fullBlocks === this.emptyFlag) {\n      return { required: true };\n    }\n    if (this.errorCount > 0) {\n      return { NgxIpControl: 'Invalid address' };\n    } else {\n      return null;\n    }\n  }\n\n  writeValue(value: any): void {\n    /* This is a special case, we can't just do this.value = value\n    because the old value is irrelevant as it might have a value differebt from the input's (not commited yet)\n    this call comes from the form so we need to reset everything. */\n    this._value = value;\n    this.blocks = this.toBlocks(value);\n    this.markValidity();\n    this._cdr.markForCheck();\n    this._cdr.detectChanges();\n  }\n\n  registerOnChange(fn: any): void {\n    this._onChangeCallback = fn;\n  }\n\n  registerOnTouched(fn: any): void {\n    this._onTouchedCallback = fn;\n  }\n\n  /**\n   * Override this method to enable custom copy mode user selection.\n   * The default implementation does not enable selection and set 'block' mode.\n   */\n  getUserCopyMethod(): Promise<COPY_METHOD> {\n    return Promise.resolve('block' as 'block');\n  }\n\n  /**\n   * A Copy (ctrl-c) event handler to control the copy behaviour based on\n   * the copyMode the user have selected.\n   *\n   * Do not override this method in extending classes, to provide a custom\n   * mode selection UX use getUserCopyMethod()\n   *\n   * This method handles the whole copy process, including browser support\n   * initialization and the \"select\" copy mode process.\n   * @internal\n   */\n  onCopy($event: ClipboardEvent, idx: number): void {\n    switch (COPY_FEAT_SUPPORTED) {\n      case 'TEST':\n        // if we hit this it means we are testing if copy works on this\n        // browser, and it does...\n        COPY_FEAT_SUPPORTED = true;\n        return;\n      case true:\n        break;\n      case false:\n        return; // not supported, returning here will in-effect apply \"block\" mode.\n      case null:\n        // make sure recursion will not overflow\n        COPY_FEAT_SUPPORTED = 'TEST';\n        document.execCommand('copy');\n        if (<any> COPY_FEAT_SUPPORTED !== true) {\n          // if not supported return without cancelling, resulting in the original copy command\n          // passed through as usual, setting COPY_FEAT_SUPPORTED to false also means\n          // it will not allow changing the copyMode. We also set the copy mode to the default.\n          COPY_FEAT_SUPPORTED = false;\n          return;\n        }\n        break;\n      default:\n        return;\n    }\n\n    try {\n      switch (this.autoCopy) {\n        case 'block':\n          this.autoCopy = undefined;\n        case 'DEFAULT_BLOCK':\n          return;\n        case 'address':\n          this.autoCopy = undefined;\n        case 'DEFAULT_ADDRESS':\n          const value = this.fromBlocks(this.blocks);\n          $event.clipboardData.setData('text', value);\n          cancelEvent($event);\n          break;\n        case 'IN_FLIGHT':\n          cancelEvent($event);\n          break;\n        default:\n          cancelEvent($event);\n          if (inputSelection.all($event.target as any)) {\n            this.autoCopy = 'IN_FLIGHT';\n            this.getUserCopyMethod()\n              .then( method => {\n                this.autoCopy = (method === 'address' ? 'address' : 'block');\n                this.copyUserSelectedMethod(idx);\n              })\n              .catch( err => this.autoCopy = undefined );\n          }\n          break;\n      }\n    } catch (e) {\n    }\n  }\n\n  /**\n   * A Paste (ctrl-v) event handler to control the paste behaviour.\n   * This method can be overriden by extending classes.\n   * When overriding, use paste() method.\n   */\n  onPaste($event: ClipboardEvent, blockIndex: number): void {\n    try {\n      const data = $event.clipboardData.getData('text');\n      this.paste(data, blockIndex);\n    } catch (e) { }\n    cancelEvent($event);\n  }\n\n  onChange(value: string, idx: number): void {\n    if (this.blocks[idx] === value) {\n      return;\n    }\n    this.blocks[idx] = value;\n    this.markValidity();\n    this.notifyChange(this.fromBlocks(this.blocks));\n  }\n\n  onKeyPress($event: KeyboardEvent, idx: number): void {\n    // safari/ff will cancel copy/paste , chrome wont... so don't mess with it.\n    if ($event.metaKey || $event.ctrlKey || $event.altKey) {\n      return;\n    }\n\n    // browser support (e.g: safari)\n    let key = typeof $event.key === 'string' ? $event.key : String.fromCharCode($event.charCode);\n\n    if (key === 'Tab') { // FireFox\n      return;\n    } else  if (key === this.separator) {\n      cancelEvent($event);\n      this.focusNext(idx);\n    } else if (this.isBackspace($event)) { // for FireFox\n      return this.onKeyUp($event, idx);\n    }\n\n    const isLast = inputSelection.caretIsLast($event.target as any);\n    const value = inputSelection.insert($event.target as any, key);\n\n    if (this.inputValidation === 'char' && !this.addr.RE_CHAR.test(key)) {\n      return cancelEvent($event);\n    } else if (this.inputValidation === 'block' && !this.addr.RE_BLOCK[idx].test(value)) {\n      return cancelEvent($event);\n    }\n\n    this.markBlockValidity(value, idx);\n    if (!this.invalidBlocks[idx] && isLast && this.addr.isMaxLen(value)) {\n      // FireFox will not update the value into the input if we move focus.\n      setTimeout(() => this.focusNext(idx, false));\n    }\n  }\n\n  onKeyUp($event: KeyboardEvent, idx: number): void {\n    if (this.isBackspace($event)) {\n      const input: HTMLInputElement = $event.target as any;\n      const value = input && input.selectionStart >= 0 && input.selectionEnd > input.selectionStart\n        ? input.value.substr(0, input.selectionStart) + input.value.substr(input.selectionEnd)\n        : input.value.substr(0, input.value.length - 1)\n      ;\n      this.markBlockValidity(value, idx);\n    }\n  }\n\n  onBlur(idx: number): void {\n    this.focused = false;\n  }\n\n  onFocus(idx: number): void {\n    if (!this.readonly) {\n      this.focused = true;\n    }\n  }\n\n  protected isBackspace($event: KeyboardEvent): boolean {\n    return $event.keyCode === 8 || $event.key === 'Backspace';\n  }\n\n  protected getInputElement(blockIndex: number): HTMLInputElement | undefined {\n    const input = this.inputs.toArray()[blockIndex];\n    return input && input.nativeElement;\n  }\n\n  protected paste(data: string, blockIndex: number): boolean {\n    let arr = this.addr.split(data, this.separator);\n    if (arr.length === this.addr.BLOCK_COUNT) {\n      this.value = this.fromBlocks(arr);\n    } else {\n      const value = inputSelection.insert(this.getInputElement(blockIndex), arr[0]);\n      this.onChange(value, blockIndex);\n    }\n    return true;\n  }\n\n  protected reset(): void {\n    this.errorCount = 0;\n    for (let i = 0; i < this.addr.BLOCK_COUNT; i++) {\n      this.invalidBlocks[i] = false;\n    }\n  }\n\n  /**\n   * mark the validity for all blocks\n   */\n  protected markValidity(): void {\n    for (let i = 0; i < this.addr.BLOCK_COUNT; i++) {\n      this.markBlockValidity(this.blocks[i], i);\n    }\n    if (this.fullBlocks === this.emptyFlag) {\n      this.reset();\n    }\n  }\n\n  protected markBlockValidity(value: string, idx: number): void {\n    if (!value) {\n      this.emptyFlag |= 1 << (idx + 1);\n    } else {\n      this.emptyFlag &= this.emptyFlag - (1 << (idx + 1));\n    }\n    const lastHasError = !!this.invalidBlocks[idx];\n    this.invalidBlocks[idx] = !this.addr.RE_BLOCK[idx].test(value);\n    // Special check for IPv4 with mask. RegExp will accept 0,1,2,3 which are invalid.\n    // current address data model can not support this abstraction.\n    if (idx === 4 && this.addr === v4WithMask && !this.invalidBlocks[idx]) {\n      this.invalidBlocks[idx] = parseInt(value, 10) < 0;\n    }\n    if (lastHasError && !this.invalidBlocks[idx]) {\n      this.errorCount--;\n    } else if (!lastHasError && this.invalidBlocks[idx]) {\n      this.errorCount++;\n    }\n  }\n\n  protected focusNext(idx: number, selectRange: boolean = true): void {\n    const next = this.getInputElement(idx + 1);\n    if (next) {\n      next.focus();\n\n      if (selectRange && this.blocks[idx + 1]) {\n        next.setSelectionRange(0, this.blocks[idx + 1].toString().length);\n      }\n    }\n  }\n\n  protected toBlocks(value: string): string[] {\n    return this.addr.split(value, this.separator);\n  }\n\n  protected fromBlocks(blocks: string[]): string {\n    if (this.fullBlocks === this.emptyFlag) {\n      return '';\n    } else {\n      return this.addr.fromBlocks(blocks, this.separator);\n    }\n  }\n\n  private copyUserSelectedMethod(blockIndex: number) {\n    try {\n      const input: HTMLInputElement = this.getInputElement(blockIndex);\n      // we can't use the renderer here since it's async thus will run on the next turn.\n      // it will force us to run the copy command in a timeout (after selection was made).\n      // this will break clipboard policy on some browsers.\n      if (input && input.select) {\n        input.select();\n      }\n      document.execCommand('copy');\n    } catch (e) {\n      this.autoCopy = 'DEFAULT_BLOCK';\n    }\n  }\n\n  private notifyChange(value: string): void {\n    this._onChangeCallback(value);\n    this.change.emit(value);\n  }\n\n}\n","export const noop = () => {};\n\nexport interface AddressModeLogic {\n  BLOCK_COUNT: number;\n  SEP: string;\n  RE_CHAR: RegExp;\n  RE_BLOCK: RegExp[];\n  blocks: () => string[];\n  fromBlocks: (blocks: string[], sep?: string) => string;\n  split: (value: string, sep?: string, throwError?: boolean) => string[];\n  isValid: (blocks: string[]) => boolean;\n  isMaxLen: (value: string) => boolean;\n}\n\nconst V4_BLOCK_RE = /^([01]?[0-9]?[0-9]|2[0-4][0-9]|25[0-5])$/;\n\nexport const v4: AddressModeLogic = {\n  BLOCK_COUNT: 4,\n  SEP: '.',\n  RE_CHAR: /^[0-9]$/,\n  RE_BLOCK: [V4_BLOCK_RE, V4_BLOCK_RE, V4_BLOCK_RE, V4_BLOCK_RE],\n  blocks(): string[] { return ['', '' , '', '']; },\n  fromBlocks(blocks: string[], sep: string = v4.SEP): string {\n    return blocks.join(sep);\n  },\n  split(value: string, sep: string = v4.SEP, throwError: boolean = false): string[] {\n    if (!value) {\n      return v4.blocks();\n    }\n    const result = value.split(sep);\n    if (throwError && result.length !== v4.BLOCK_COUNT ) {\n      throw new Error('Invalid IPV4');\n    }\n    return result;\n  },\n  isValid(blocks: string[]): boolean {\n    return blocks.every(value => parseInt(value, 10) >= 0 && parseInt(value, 10) <= 255);\n  },\n  isMaxLen(value: string): boolean {\n    if (value.length === 3) {\n      return true;\n    } else if (value.length === 2 && parseInt(value, 10) > 25) {\n      return true;\n    } else {\n      return false;\n    }\n  }\n};\n\nexport const v4WithMask: AddressModeLogic = Object.assign(Object.create(v4), {\n  BLOCK_COUNT: 5,\n  RE_BLOCK: v4.RE_BLOCK.concat([/^([0-2]?[0-9]|30)$/]),\n  blocks(): string[] { return ['', '' , '', '', '']; },\n  fromBlocks(blocks: string[], sep: string = v4.SEP): string {\n    return blocks.slice(0, 4).join(sep) + `/${blocks[4]}`;\n  },\n  split(value: string, sep: string = v4.SEP, throwError: boolean = false): string[] {\n    if (!value) {\n      return v4WithMask.blocks();\n    }\n    const result = value.split(sep);\n    result.push(...result.pop().split('/'));\n    if (throwError && result.length !== v4WithMask.BLOCK_COUNT ) {\n      throw new Error('Invalid IPV4 with Mask');\n    }\n    return result;\n  },\n  isValid(blocks: string[]): boolean {\n    for (let i = 0; i < 4; i++) {\n      const value = parseInt(blocks[i], 10);\n      if ( !(value >= 0 && value <= 255) ) {\n        return false;\n      }\n    }\n    const value = parseInt(blocks[4], 10);\n    return value >= 0 && value <= 30;\n  },\n  isMaxLen(value: string): boolean {\n    if (value.length === 3) {\n      return true;\n    } else if (value.length === 2 && parseInt(value, 10) > 25) {\n      return true;\n    } else {\n      return false;\n    }\n  }\n});\n\nconst V6_BLOCK_RE = /^[0-9A-Fa-f]{0,4}$/;\n\nexport const v6: AddressModeLogic = {\n  BLOCK_COUNT: 8,\n  SEP: ':',\n  RE_CHAR: /^[0-9A-Fa-f]$/,\n  RE_BLOCK: v4.RE_BLOCK.map( s => V6_BLOCK_RE).concat(v4.RE_BLOCK.map( s => V6_BLOCK_RE)),\n  blocks(): string[] { return v4.blocks().concat(v4.blocks()); },\n  fromBlocks(blocks: string[], sep: string  = v6.SEP): string {\n    return blocks.map(value => value ? value : '0000').join(sep);\n  },\n  split(value: string, sep: string = v6.SEP, throwError: boolean = false): string[] {\n    if (!value) {\n      return v6.blocks();\n    }\n    const consecutiveSplit = value.split(sep + sep);\n    const result: string[] = consecutiveSplit[0].split(sep);\n\n    if (consecutiveSplit.length === 2) {\n      // if :: is used we need to calculate the amount of empty blocks.\n      // - Get the right parts (left is already the result)\n      // - find how much blocks are missing to reach total of 8.\n      // - fill the empty blocks and append right part.\n      let rightPart = consecutiveSplit[1].split(sep);\n\n      let emptySpaces = v6.BLOCK_COUNT - (result.length + rightPart.length);\n\n      result.splice(result.length, 0, ...v6.blocks().slice(0, emptySpaces));\n      result.splice(result.length, 0, ...rightPart);\n    }\n\n    // consecutive :: allowed once.\n    if (throwError && (consecutiveSplit.length > 2 || result.length !== v6.BLOCK_COUNT) ) {\n      throw new Error('Invalid IPV6');\n    }\n\n    return result;\n  },\n  isValid(blocks: string[]): boolean {\n    return blocks.every(value => V6_BLOCK_RE.test(value)) && blocks.some(value => !!value)\n  },\n  isMaxLen(value: string): boolean {\n    return value.length === 4;\n  }\n};\n\nconst MAC_BLOCK_RE = /^[0-9A-Fa-f]{1,2}$/;\n\nexport const mac: AddressModeLogic = Object.assign(Object.create(v6), {\n  BLOCK_MAX_LEN: 2,\n  BLOCK_COUNT: 6,\n  RE_BLOCK: v4.RE_BLOCK.map( s => MAC_BLOCK_RE).concat([MAC_BLOCK_RE, MAC_BLOCK_RE]),\n  blocks(): string[] { return ['', '' , '', '', '', '']; },\n  fromBlocks(blocks: string[], sep: string =  mac.SEP): string {\n    return blocks.join(sep);\n  },\n  split(value: string, sep: string = mac.SEP, throwError: boolean = false): string[] {\n    if (!value) {\n      return mac.blocks();\n    }\n    const result = value.split(sep);\n    if ( throwError && result.length !== mac.BLOCK_COUNT ) {\n      throw new Error('Invalid MAC address');\n    }\n    return result;\n  },\n  isValid(blocks: string[]): boolean {\n    return blocks.every(value => MAC_BLOCK_RE.test(value)) && blocks.some(value => !!value);\n  },\n  isMaxLen(value: string): boolean {\n    return value.length === 2;\n  }\n});\n\nexport const inputSelection = {\n  /**\n   * Given an input element, insert the supplied value at the caret position.\n   * If some (or all) of the text is selected, replaces the selection with the value.\n   * In case the input is falsy returns the value. (universal)\n   * @param input\n   * @param value\n   */\n  insert(input: HTMLInputElement, value: string): string {\n    return input\n      ? input.value.substr(0, input.selectionStart) + value + input.value.substr(input.selectionEnd)\n      : value\n    ;\n  },\n  caretIsLast(input: HTMLInputElement): boolean {\n    return input\n      ? input.selectionStart === input.selectionEnd && input.selectionStart === input.value.length\n      : false\n    ;\n  },\n  /**\n   * Returns true if some (or all) of the text is selected\n   * @param input\n   */\n  some(input: HTMLInputElement): boolean {\n    return input.selectionStart > input.selectionEnd;\n  },\n  /**\n   * Returns true if the whole text is selected\n   * @param input\n   */\n  all(input: HTMLInputElement): boolean {\n    return input.selectionStart === 0 && input.selectionEnd === input.value.length;\n  }\n};\n\n// https://github.com/angular/material2/blob/master/src/cdk/coercion/boolean-property.ts\nexport function coerceBooleanProperty(value: any): boolean {\n  return value != null && `${value}` !== 'false';\n}\n"],"names":[],"mappings":"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"}