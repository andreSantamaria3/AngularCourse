import * as tslib_1 from "tslib";
import { AfterViewInit, Directive, ElementRef, HostListener, Input, Renderer2 } from '@angular/core';
import * as ɵngcc0 from '@angular/core';
let AppendToInputDirective = class AppendToInputDirective {
    constructor(elementRef, renderer) {
        this.renderer = renderer;
        this.element = elementRef.nativeElement;
    }
    get inputCords() {
        return this.inputElement.getBoundingClientRect();
    }
    get direction() {
        const height = this.element.offsetHeight;
        const { bottom, top } = this._inputCords;
        const isElementFit = (window && window.innerHeight) - bottom < height;
        const isTop = isElementFit && top > height;
        const isCenter = isElementFit && top < height;
        if (isTop) {
            return 'top';
        }
        else if (isCenter) {
            return 'center';
        }
        return 'bottom';
    }
    ngAfterViewInit() {
        this._inputCords = this.inputCords;
        this._direction = this.direction;
        this.append();
    }
    changePosition() {
        const { bottom, top } = this.inputCords;
        const y = this.defineElementYByDirection(top, bottom);
        this.setStyle('top', `${y}px`);
    }
    append() {
        const { left, bottom, top } = this._inputCords;
        const y = this.defineElementYByDirection(top, bottom);
        this.setStyle('position', 'fixed');
        this.setStyle('left', `${left}px`);
        this.setStyle('top', `${y}px`);
    }
    setStyle(style, value) {
        this.renderer.setStyle(this.element, style, value);
    }
    defineElementYByDirection(inputTop, inputBottom) {
        if (this._direction === 'top') {
            return inputTop - this.element.offsetHeight;
        }
        else if (this._direction === 'center') {
            return inputTop - (this.element.offsetHeight / 2);
        }
        return inputBottom;
    }
};
AppendToInputDirective.ɵfac = function AppendToInputDirective_Factory(t) { return new (t || AppendToInputDirective)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ElementRef), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.Renderer2)); };
AppendToInputDirective.ɵdir = ɵngcc0.ɵɵdefineDirective({ type: AppendToInputDirective, selectors: [["", "ngxAppendToInput", ""]], hostBindings: function AppendToInputDirective_HostBindings(rf, ctx) { if (rf & 1) {
        ɵngcc0.ɵɵlistener("scroll", function AppendToInputDirective_scroll_HostBindingHandler() { return ctx.changePosition(); }, false, ɵngcc0.ɵɵresolveWindow);
    } }, inputs: { inputElement: ["ngxAppendToInput", "inputElement"] } });
AppendToInputDirective.ctorParameters = () => [
    { type: ElementRef },
    { type: Renderer2 }
];
tslib_1.__decorate([
    Input('ngxAppendToInput')
], AppendToInputDirective.prototype, "inputElement", void 0);
tslib_1.__decorate([
    HostListener('window:scroll')
], AppendToInputDirective.prototype, "changePosition", null);
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(AppendToInputDirective, [{
        type: Directive,
        args: [{
                selector: '[ngxAppendToInput]'
            }]
    }], function () { return [{ type: ɵngcc0.ElementRef }, { type: ɵngcc0.Renderer2 }]; }, { changePosition: [{
            type: HostListener,
            args: ['window:scroll']
        }], inputElement: [{
            type: Input,
            args: ['ngxAppendToInput']
        }] }); })();
export { AppendToInputDirective };

//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiYXBwZW5kLXRvLWlucHV0LmRpcmVjdGl2ZS5qcyIsInNvdXJjZXMiOlsibmd4LW1hdGVyaWFsLXRpbWVwaWNrZXIvc3JjL2FwcC9tYXRlcmlhbC10aW1lcGlja2VyL2RpcmVjdGl2ZXMvYXBwZW5kLXRvLWlucHV0LmRpcmVjdGl2ZS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiO0FBQUEsT0FBTyxFQUFFLGFBQWEsRUFBRSxTQUFTLEVBQUUsVUFBVSxFQUFFLFlBQVksRUFBRSxLQUFLLEVBQUUsU0FBUyxFQUFFLE1BQU0sZUFBZSxDQUFDOztBQU9yRyxJQUFhLHNCQUFzQixHQUFuQyxNQUFhLHNCQUFzQjtBQUFHLElBUWxDLFlBQVksVUFBbUMsRUFDM0IsUUFBbUI7QUFDM0MsUUFEd0IsYUFBUSxHQUFSLFFBQVEsQ0FBVztBQUFDLFFBQ3BDLElBQUksQ0FBQyxPQUFPLEdBQUcsVUFBVSxDQUFDLGFBQWEsQ0FBQztBQUNoRCxJQUFJLENBQUM7QUFDTCxJQUNJLElBQVksVUFBVTtBQUFLLFFBQ3ZCLE9BQU8sSUFBSSxDQUFDLFlBQVksQ0FBQyxxQkFBcUIsRUFBRSxDQUFDO0FBQ3pELElBQUksQ0FBQztBQUNMLElBQ0ksSUFBWSxTQUFTO0FBQUssUUFDdEIsTUFBTSxNQUFNLEdBQUcsSUFBSSxDQUFDLE9BQU8sQ0FBQyxZQUFZLENBQUM7QUFDakQsUUFBUSxNQUFNLEVBQUMsTUFBTSxFQUFFLEdBQUcsRUFBQyxHQUFHLElBQUksQ0FBQyxXQUFXLENBQUM7QUFDL0MsUUFBUSxNQUFNLFlBQVksR0FBRyxDQUFDLE1BQU0sSUFBSSxNQUFNLENBQUMsV0FBVyxDQUFDLEdBQUcsTUFBTSxHQUFHLE1BQU0sQ0FBQztBQUM5RSxRQUFRLE1BQU0sS0FBSyxHQUFHLFlBQVksSUFBSSxHQUFHLEdBQUcsTUFBTSxDQUFDO0FBQ25ELFFBQVEsTUFBTSxRQUFRLEdBQUcsWUFBWSxJQUFJLEdBQUcsR0FBRyxNQUFNLENBQUM7QUFDdEQsUUFDUSxJQUFJLEtBQUssRUFBRTtBQUNuQixZQUFZLE9BQU8sS0FBSyxDQUFDO0FBQ3pCLFNBQVM7QUFBQyxhQUFLLElBQUksUUFBUSxFQUFFO0FBQzdCLFlBQVksT0FBTyxRQUFRLENBQUM7QUFDNUIsU0FBUztBQUNULFFBQVEsT0FBTyxRQUFRLENBQUM7QUFDeEIsSUFBSSxDQUFDO0FBQ0wsSUFDSSxlQUFlO0FBQUssUUFDaEIsSUFBSSxDQUFDLFdBQVcsR0FBRyxJQUFJLENBQUMsVUFBVSxDQUFDO0FBQzNDLFFBQVEsSUFBSSxDQUFDLFVBQVUsR0FBRyxJQUFJLENBQUMsU0FBUyxDQUFDO0FBQ3pDLFFBQ1EsSUFBSSxDQUFDLE1BQU0sRUFBRSxDQUFDO0FBQ3RCLElBQUksQ0FBQztBQUNMLElBRUksY0FBYztBQUFLLFFBQ2YsTUFBTSxFQUFDLE1BQU0sRUFBRSxHQUFHLEVBQUMsR0FBRyxJQUFJLENBQUMsVUFBVSxDQUFDO0FBQzlDLFFBQVEsTUFBTSxDQUFDLEdBQUcsSUFBSSxDQUFDLHlCQUF5QixDQUFDLEdBQUcsRUFBRSxNQUFNLENBQUMsQ0FBQztBQUM5RCxRQUFRLElBQUksQ0FBQyxRQUFRLENBQUMsS0FBSyxFQUFFLEdBQUcsQ0FBQyxJQUFJLENBQUMsQ0FBQztBQUN2QyxJQUFJLENBQUM7QUFDTCxJQUNZLE1BQU07QUFBSyxRQUNmLE1BQU0sRUFBQyxJQUFJLEVBQUUsTUFBTSxFQUFFLEdBQUcsRUFBQyxHQUFHLElBQUksQ0FBQyxXQUFXLENBQUM7QUFDckQsUUFBUSxNQUFNLENBQUMsR0FBRyxJQUFJLENBQUMseUJBQXlCLENBQUMsR0FBRyxFQUFFLE1BQU0sQ0FBQyxDQUFDO0FBQzlELFFBQ1EsSUFBSSxDQUFDLFFBQVEsQ0FBQyxVQUFVLEVBQUUsT0FBTyxDQUFDLENBQUM7QUFDM0MsUUFBUSxJQUFJLENBQUMsUUFBUSxDQUFDLE1BQU0sRUFBRSxHQUFHLElBQUksSUFBSSxDQUFDLENBQUM7QUFDM0MsUUFBUSxJQUFJLENBQUMsUUFBUSxDQUFDLEtBQUssRUFBRSxHQUFHLENBQUMsSUFBSSxDQUFDLENBQUM7QUFDdkMsSUFBSSxDQUFDO0FBQ0wsSUFDWSxRQUFRLENBQUMsS0FBYSxFQUFFLEtBQWE7QUFBSSxRQUM3QyxJQUFJLENBQUMsUUFBUSxDQUFDLFFBQVEsQ0FBQyxJQUFJLENBQUMsT0FBTyxFQUFFLEtBQUssRUFBRSxLQUFLLENBQUMsQ0FBQztBQUMzRCxJQUFJLENBQUM7QUFDTCxJQUNZLHlCQUF5QixDQUFDLFFBQWdCLEVBQUUsV0FBbUI7QUFBSSxRQUN2RSxJQUFJLElBQUksQ0FBQyxVQUFVLEtBQUssS0FBSyxFQUFFO0FBQ3ZDLFlBQVksT0FBTyxRQUFRLEdBQUcsSUFBSSxDQUFDLE9BQU8sQ0FBQyxZQUFZLENBQUM7QUFDeEQsU0FBUztBQUFDLGFBQUssSUFBSSxJQUFJLENBQUMsVUFBVSxLQUFLLFFBQVEsRUFBRTtBQUNqRCxZQUFZLE9BQU8sUUFBUSxHQUFHLENBQUMsSUFBSSxDQUFDLE9BQU8sQ0FBQyxZQUFZLEdBQUcsQ0FBQyxDQUFDLENBQUM7QUFDOUQsU0FBUztBQUNULFFBQVEsT0FBTyxXQUFXLENBQUM7QUFDM0IsSUFBSSxDQUFDO0FBQ0wsQ0FBQzs7OzsyRUFBQTtBQUNEO0FBQWdELFlBNURwQixVQUFVO0FBQUksWUFDUixTQUFTO0FBQUc7QUFQZjtBQUU5QixJQUZJLEtBQUssQ0FBQyxrQkFBa0IsQ0FBQztBQUFDLDREQUFrQjtBQXNDN0M7QUFBcUIsSUFEcEIsWUFBWSxDQUFDLGVBQWUsQ0FBQztBQUNsQyw0REFJSztBQTVDUSxzQkFBc0IsNEJBSGxDLFNBQVMsQ0FBQyxVQUNQLFFBQVEsRUFBRTttQkFBb0I7QUFDakMsQ0FBQyxJQUNXO1VBQXNCLENBbUVsQzs7Ozs7Ozs7b0JBQ0Q7QUFBQyxTQXBFWSxzQkFBc0I7QUFBSSIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IEFmdGVyVmlld0luaXQsIERpcmVjdGl2ZSwgRWxlbWVudFJlZiwgSG9zdExpc3RlbmVyLCBJbnB1dCwgUmVuZGVyZXIyIH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XG5cbnR5cGUgVGltZXBpY2tlckRpcmVjdGlvbiA9ICd0b3AnIHwgJ2NlbnRlcicgfCAnYm90dG9tJztcblxuQERpcmVjdGl2ZSh7XG4gICAgc2VsZWN0b3I6ICdbbmd4QXBwZW5kVG9JbnB1dF0nXG59KVxuZXhwb3J0IGNsYXNzIEFwcGVuZFRvSW5wdXREaXJlY3RpdmUgaW1wbGVtZW50cyBBZnRlclZpZXdJbml0IHtcblxuICAgIEBJbnB1dCgnbmd4QXBwZW5kVG9JbnB1dCcpIGlucHV0RWxlbWVudDogYW55O1xuXG4gICAgcHJpdmF0ZSBfZGlyZWN0aW9uOiBUaW1lcGlja2VyRGlyZWN0aW9uO1xuICAgIHByaXZhdGUgX2lucHV0Q29yZHM6IENsaWVudFJlY3Q7XG4gICAgcHJpdmF0ZSByZWFkb25seSBlbGVtZW50OiBIVE1MRWxlbWVudDtcblxuICAgIGNvbnN0cnVjdG9yKGVsZW1lbnRSZWY6IEVsZW1lbnRSZWY8SFRNTEVsZW1lbnQ+LFxuICAgICAgICAgICAgICAgIHByaXZhdGUgcmVuZGVyZXI6IFJlbmRlcmVyMikge1xuICAgICAgICB0aGlzLmVsZW1lbnQgPSBlbGVtZW50UmVmLm5hdGl2ZUVsZW1lbnQ7XG4gICAgfVxuXG4gICAgcHJpdmF0ZSBnZXQgaW5wdXRDb3JkcygpOiBDbGllbnRSZWN0IHtcbiAgICAgICAgcmV0dXJuIHRoaXMuaW5wdXRFbGVtZW50LmdldEJvdW5kaW5nQ2xpZW50UmVjdCgpO1xuICAgIH1cblxuICAgIHByaXZhdGUgZ2V0IGRpcmVjdGlvbigpOiBUaW1lcGlja2VyRGlyZWN0aW9uIHtcbiAgICAgICAgY29uc3QgaGVpZ2h0ID0gdGhpcy5lbGVtZW50Lm9mZnNldEhlaWdodDtcbiAgICAgICAgY29uc3Qge2JvdHRvbSwgdG9wfSA9IHRoaXMuX2lucHV0Q29yZHM7XG4gICAgICAgIGNvbnN0IGlzRWxlbWVudEZpdCA9ICh3aW5kb3cgJiYgd2luZG93LmlubmVySGVpZ2h0KSAtIGJvdHRvbSA8IGhlaWdodDtcbiAgICAgICAgY29uc3QgaXNUb3AgPSBpc0VsZW1lbnRGaXQgJiYgdG9wID4gaGVpZ2h0O1xuICAgICAgICBjb25zdCBpc0NlbnRlciA9IGlzRWxlbWVudEZpdCAmJiB0b3AgPCBoZWlnaHQ7XG5cbiAgICAgICAgaWYgKGlzVG9wKSB7XG4gICAgICAgICAgICByZXR1cm4gJ3RvcCc7XG4gICAgICAgIH0gZWxzZSBpZiAoaXNDZW50ZXIpIHtcbiAgICAgICAgICAgIHJldHVybiAnY2VudGVyJztcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gJ2JvdHRvbSc7XG4gICAgfVxuXG4gICAgbmdBZnRlclZpZXdJbml0KCk6IHZvaWQge1xuICAgICAgICB0aGlzLl9pbnB1dENvcmRzID0gdGhpcy5pbnB1dENvcmRzO1xuICAgICAgICB0aGlzLl9kaXJlY3Rpb24gPSB0aGlzLmRpcmVjdGlvbjtcblxuICAgICAgICB0aGlzLmFwcGVuZCgpO1xuICAgIH1cblxuICAgIEBIb3N0TGlzdGVuZXIoJ3dpbmRvdzpzY3JvbGwnKVxuICAgIGNoYW5nZVBvc2l0aW9uKCk6IHZvaWQge1xuICAgICAgICBjb25zdCB7Ym90dG9tLCB0b3B9ID0gdGhpcy5pbnB1dENvcmRzO1xuICAgICAgICBjb25zdCB5ID0gdGhpcy5kZWZpbmVFbGVtZW50WUJ5RGlyZWN0aW9uKHRvcCwgYm90dG9tKTtcbiAgICAgICAgdGhpcy5zZXRTdHlsZSgndG9wJywgYCR7eX1weGApO1xuICAgIH1cblxuICAgIHByaXZhdGUgYXBwZW5kKCk6IHZvaWQge1xuICAgICAgICBjb25zdCB7bGVmdCwgYm90dG9tLCB0b3B9ID0gdGhpcy5faW5wdXRDb3JkcztcbiAgICAgICAgY29uc3QgeSA9IHRoaXMuZGVmaW5lRWxlbWVudFlCeURpcmVjdGlvbih0b3AsIGJvdHRvbSk7XG5cbiAgICAgICAgdGhpcy5zZXRTdHlsZSgncG9zaXRpb24nLCAnZml4ZWQnKTtcbiAgICAgICAgdGhpcy5zZXRTdHlsZSgnbGVmdCcsIGAke2xlZnR9cHhgKTtcbiAgICAgICAgdGhpcy5zZXRTdHlsZSgndG9wJywgYCR7eX1weGApO1xuICAgIH1cblxuICAgIHByaXZhdGUgc2V0U3R5bGUoc3R5bGU6IHN0cmluZywgdmFsdWU6IHN0cmluZyk6IHZvaWQge1xuICAgICAgICB0aGlzLnJlbmRlcmVyLnNldFN0eWxlKHRoaXMuZWxlbWVudCwgc3R5bGUsIHZhbHVlKTtcbiAgICB9XG5cbiAgICBwcml2YXRlIGRlZmluZUVsZW1lbnRZQnlEaXJlY3Rpb24oaW5wdXRUb3A6IG51bWJlciwgaW5wdXRCb3R0b206IG51bWJlcik6IG51bWJlciB7XG4gICAgICAgIGlmICh0aGlzLl9kaXJlY3Rpb24gPT09ICd0b3AnKSB7XG4gICAgICAgICAgICByZXR1cm4gaW5wdXRUb3AgLSB0aGlzLmVsZW1lbnQub2Zmc2V0SGVpZ2h0O1xuICAgICAgICB9IGVsc2UgaWYgKHRoaXMuX2RpcmVjdGlvbiA9PT0gJ2NlbnRlcicpIHtcbiAgICAgICAgICAgIHJldHVybiBpbnB1dFRvcCAtICh0aGlzLmVsZW1lbnQub2Zmc2V0SGVpZ2h0IC8gMik7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIGlucHV0Qm90dG9tO1xuICAgIH1cbn1cbiJdfQ==